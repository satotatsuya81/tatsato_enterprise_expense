services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: expense-postgres
    environment:
      POSTGRES_DB: expense_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - expense_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d expense_system"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: expense-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - expense_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
      target: development
    container_name: expense-auth-service
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/expense_system?sslmode=disable
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=expense_system
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_SSL_MODE=disable
      
      # Redis configuration
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      
      # Application configuration
      - PORT=8001
      - GIN_MODE=debug
      - LOG_LEVEL=debug
      
      # JWT configuration
      - JWT_SECRET=development_jwt_secret_key_change_in_production
      - JWT_ACCESS_TOKEN_EXPIRE=15m
      - JWT_REFRESH_TOKEN_EXPIRE=168h
      - JWT_ISSUER=expense-system
      
      # CORS configuration
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    volumes:
      - ./services/auth-service:/app
      - /app/vendor
    networks:
      - expense_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # BFF Service (placeholder for future implementation)
  bff-service:
    build:
      context: ./services/bff-service
      dockerfile: Dockerfile
      target: development
    container_name: expense-bff-service
    ports:
      - "8000:8000"
    depends_on:
      auth-service:
        condition: service_healthy
    environment:
      - PORT=8000
      - AUTH_SERVICE_URL=http://auth-service:8001
      - REDIS_URL=redis://redis:6379
      - GIN_MODE=debug
      - LOG_LEVEL=debug
    volumes:
      - ./services/bff-service:/app
      - /app/vendor
    networks:
      - expense_network
    profiles:
      - full
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: expense-frontend
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=development_nextauth_secret_change_in_production
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - expense_network
    profiles:
      - full
    restart: unless-stopped

  # Nginx Reverse Proxy (optional for full deployment)
  nginx:
    image: nginx:alpine
    container_name: expense-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - auth-service
      - frontend
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - expense_network
    profiles:
      - full
      - production
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network for service communication
networks:
  expense_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16